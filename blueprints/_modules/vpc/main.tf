locals {
  name = "${var.prefix_env == "true" ? "${var.app}-${var.env}" : var.app}"

  common_tags = {
    App = "${var.app}"
    Env = "${var.env}"
  }
}

# List all available availability zones from the region
data "aws_availability_zones" "mod" {}

# ------------------------------------------------------------------------------
# [STEP 01] Create the VPC
# ------------------------------------------------------------------------------
# AWS VPC
resource "aws_vpc" "mod" {
  cidr_block           = "${var.cidr_block}"
  instance_tenancy     = "${var.tenancy_type}"
  enable_dns_support   = true
  enable_dns_hostnames = false

  tags = "${merge(local.common_tags, map("Name", local.name))}"
}

# ------------------------------------------------------------------------------
# [STEP 02] Create the VPC's subnetworks
# ------------------------------------------------------------------------------
# private subnet [AZ a] [netmask /19] [available IPv4s 8187]
resource "aws_subnet" "a_private" {
  vpc_id            = "${aws_vpc.mod.id}"
  availability_zone = "${data.aws_availability_zones.mod.names[0]}"
  cidr_block        = "${cidrsubnet(aws_vpc.mod.cidr_block, 3, 0)}"
  tags              = "${merge(local.common_tags, map("Name", "${local.name}-a-priv"))}"
}

# public subnet [AZ a] [netmask /20] [available IPv4s 4091]
resource "aws_subnet" "a_public" {
  vpc_id            = "${aws_vpc.mod.id}"
  availability_zone = "${data.aws_availability_zones.mod.names[0]}"
  cidr_block        = "${cidrsubnet(aws_vpc.mod.cidr_block, 4, 2)}"
  tags              = "${merge(local.common_tags, map("Name", "${local.name}-a-pub"))}"
}

# private subnet [AZ b] [netmask /19] [available IPv4s 8187]
resource "aws_subnet" "b_private" {
  vpc_id            = "${aws_vpc.mod.id}"
  availability_zone = "${data.aws_availability_zones.mod.names[1]}"
  cidr_block        = "${cidrsubnet(aws_vpc.mod.cidr_block, 3, 2)}"
  tags              = "${merge(local.common_tags, map("Name", "${local.name}-b-priv"))}"
}

# public subnet [AZ b] [netmask /20] [available IPv4s 4091]
resource "aws_subnet" "b_public" {
  vpc_id            = "${aws_vpc.mod.id}"
  availability_zone = "${data.aws_availability_zones.mod.names[1]}"
  cidr_block        = "${cidrsubnet(aws_vpc.mod.cidr_block, 4, 6)}"
  tags              = "${merge(local.common_tags, map("Name", "${local.name}-b-pub"))}"
}

# private subnet [AZ c] [netmask /19] [available IPv4s 8187]
resource "aws_subnet" "c_private" {
  vpc_id            = "${aws_vpc.mod.id}"
  availability_zone = "${data.aws_availability_zones.mod.names[2]}"
  cidr_block        = "${cidrsubnet(aws_vpc.mod.cidr_block, 3, 4)}"
  tags              = "${merge(local.common_tags, map("Name", "${local.name}-c-priv"))}"
}

# public subnet [AZ c] [netmask /20] [available IPv4s 4091]
resource "aws_subnet" "c_public" {
  vpc_id            = "${aws_vpc.mod.id}"
  availability_zone = "${data.aws_availability_zones.mod.names[2]}"
  cidr_block        = "${cidrsubnet(aws_vpc.mod.cidr_block, 4, 10)}"
  tags              = "${merge(local.common_tags, map("Name", "${local.name}-c-pub"))}"
}

# ------------------------------------------------------------------------------
# [STEP 03] Create the VPC's internet gateway
# ------------------------------------------------------------------------------
resource "aws_internet_gateway" "mod" {
  vpc_id = "${aws_vpc.mod.id}"
  tags   = "${merge(local.common_tags, map("Name", local.name))}"
}

# ------------------------------------------------------------------------------
# [STEP 04] Create an elastic IP address for the VPC's NAT gateway
# ------------------------------------------------------------------------------
resource "aws_eip" "mod" {
  vpc = true
}

# ------------------------------------------------------------------------------
# [STEP 05] Create the VPC's NAT gateway
# ------------------------------------------------------------------------------
resource "aws_nat_gateway" "mod" {
  # declare artificial dependency on the internet gateway resource
  depends_on = ["aws_internet_gateway.mod"]

  # the NAT requires an elastic IP for rerouting requests to the private subnets
  allocation_id = "${aws_eip.mod.id}"

  # the NAT has to sit in a public subnet; we'll put it in 'a_public'
  subnet_id = "${aws_subnet.a_public.id}"

  # TODO: terraform v0.10.5 supports tags for AWS NAT Gateway, but validation
  # for this resource block is still stuck a patch behind. Enable this ASAP
  # tags   = "${merge(local.common_tags, map("Name", local.name))}"
}

# ------------------------------------------------------------------------------
# [STEP 06] Configure the 2 route tables for private and public routing
# ------------------------------------------------------------------------------
# Use the default route table (generated by the VPC) for the private subnets
resource "aws_default_route_table" "private" {
  default_route_table_id = "${aws_vpc.mod.default_route_table_id}"

  route {
    cidr_block = "0.0.0.0/0"

    # Point non-local traffic from the private subnets to the NAT gateway.
    nat_gateway_id = "${aws_nat_gateway.mod.id}"
  }

  tags = "${merge(local.common_tags, map("Name", "${local.name}-private"))}"
}

# Create another route table for the public subnets
resource "aws_route_table" "public" {
  vpc_id = "${aws_vpc.mod.id}"

  route {
    cidr_block = "0.0.0.0/0"

    # Point non-local traffic to the internet gateway.
    gateway_id = "${aws_internet_gateway.mod.id}"
  }

  tags = "${merge(local.common_tags, map("Name", "${local.name}-public"))}"
}

# ------------------------------------------------------------------------------
# [STEP 07] Associate subnets with their respective route tables
# ------------------------------------------------------------------------------
resource "aws_route_table_association" "a_private" {
  subnet_id      = "${aws_subnet.a_private.id}"
  route_table_id = "${aws_default_route_table.private.id}"
}

resource "aws_route_table_association" "b_private" {
  subnet_id      = "${aws_subnet.b_private.id}"
  route_table_id = "${aws_default_route_table.private.id}"
}

resource "aws_route_table_association" "c_private" {
  subnet_id      = "${aws_subnet.c_private.id}"
  route_table_id = "${aws_default_route_table.private.id}"
}

resource "aws_route_table_association" "a_public" {
  subnet_id      = "${aws_subnet.a_public.id}"
  route_table_id = "${aws_route_table.public.id}"
}

resource "aws_route_table_association" "b_public" {
  subnet_id      = "${aws_subnet.b_public.id}"
  route_table_id = "${aws_route_table.public.id}"
}

resource "aws_route_table_association" "c_public" {
  subnet_id      = "${aws_subnet.c_public.id}"
  route_table_id = "${aws_route_table.public.id}"
}

# ------------------------------------------------------------------------------
# [STEP 08] Configure VPC's security group (first line of defense)
# ------------------------------------------------------------------------------
# Bring the default security group (generated by the VPC) under our control.
resource "aws_default_security_group" "mod" {
  vpc_id = "${aws_vpc.mod.id}"

  ingress {
    protocol  = -1
    self      = true
    from_port = 0
    to_port   = 0
  }

  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }

  tags = "${merge(local.common_tags, map("Name", local.name))}"
}

# ------------------------------------------------------------------------------
# [STEP 09] Configure VPC's network ACL (second line of defense)
# ------------------------------------------------------------------------------
# Bring the default network ACL (generated by the VPC) under our control.
resource "aws_default_network_acl" "mod" {
  default_network_acl_id = "${aws_vpc.mod.default_network_acl_id}"

  ingress {
    protocol   = -1
    rule_no    = 100
    action     = "allow"
    cidr_block = "0.0.0.0/0"
    from_port  = 0
    to_port    = 0
  }

  egress {
    protocol   = -1
    rule_no    = 100
    action     = "allow"
    cidr_block = "0.0.0.0/0"
    from_port  = 0
    to_port    = 0
  }

  tags = "${merge(local.common_tags, map("Name", local.name))}"
}
